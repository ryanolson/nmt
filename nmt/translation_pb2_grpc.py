# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import translation_pb2 as translation__pb2


class InferenceStub(object):
  """
  The ImageClassification service is designed only to compute the forward
  pass of a DNN on a set a prepared data of length batch_size.  The service
  returns a list of results for the top_n scoring labels.

  This service should be paired with other services to provide batching
  and data processing as part of a 

  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.Compute = channel.unary_unary(
        '/Inference/Compute',
        request_serializer=translation__pb2.BatchInput.SerializeToString,
        response_deserializer=translation__pb2.BatchPredictions.FromString,
        )


class InferenceServicer(object):
  """
  The ImageClassification service is designed only to compute the forward
  pass of a DNN on a set a prepared data of length batch_size.  The service
  returns a list of results for the top_n scoring labels.

  This service should be paired with other services to provide batching
  and data processing as part of a 

  """

  def Compute(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_InferenceServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'Compute': grpc.unary_unary_rpc_method_handler(
          servicer.Compute,
          request_deserializer=translation__pb2.BatchInput.FromString,
          response_serializer=translation__pb2.BatchPredictions.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'Inference', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
